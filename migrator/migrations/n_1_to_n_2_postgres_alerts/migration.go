// Code to be generated by pg-bindings generator.

package n1ton2

import (
	"context"

	"github.com/gogo/protobuf/proto"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/pkg/errors"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/migrator/log"
	"github.com/stackrox/rox/migrator/migrations"
	"github.com/stackrox/rox/migrator/types"
	pkgSchema "github.com/stackrox/rox/pkg/postgres/schema"
	"github.com/tecbot/gorocksdb"
	"gorm.io/gorm"
)

var (
	migration = types.Migration{
		StartingSeqNum: 100,
		VersionAfter:   storage.Version{SeqNum: 101},
		Run: func(databases *types.Databases) error {
			if err := moveAlerts(databases.RocksDB, databases.GormDB, databases.PostgresDB); err != nil {
				return errors.Wrap(err,
					"moving alerts from rocksdb to postgres")
			}
			return nil
		},
	}
	rocksdbBucket = []byte("alerts")
)

func moveAlerts(rocksDB *gorocksdb.DB, gormDB *gorm.DB, postgresDB *pgxpool.Pool) error {
	ctx := context.Background()
	store := newStore(postgresDB)
	it := rocksDB.NewIterator(gorocksdb.NewDefaultReadOptions())
	defer it.Close()
	pkgSchema.ApplySchemaForTable(context.Background(), gormDB, "alerts")

	var alerts []*storage.Alert
	for it.Seek(rocksdbBucket); it.ValidForPrefix(rocksdbBucket); it.Next() {
		r := &storage.Alert{}
		if err := proto.Unmarshal(it.Value().Data(), r); err != nil {
			return errors.Wrapf(err, "failed to unmarshal alert data for key %v", it.Key().Data())
		}
		alerts = append(alerts, r)
		if len(alerts) == 10*batchSize {
			if err := store.copyFrom(ctx, alerts...); err != nil {
				log.WriteToStderrf("failed to persist alerts to store %v", err)
				return err
			}
			alerts = alerts[:0]
		}
	}

	if len(alerts) > 0 {
		if err := store.copyFrom(ctx, alerts...); err != nil {
			log.WriteToStderrf("failed to persist alerts to store %v", err)
			return err
		}
	}
	return nil
}

func init() {
	migrations.MustRegisterMigration(migration)
}
