// Code generated by pg-bindings generator. DO NOT EDIT.
package n13ton14

import (
	"context"

	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/pkg/errors"
	"github.com/stackrox/rox/generated/storage"
	"github.com/stackrox/rox/migrator/migrations"
	"github.com/stackrox/rox/migrator/migrations/loghelper"
	"github.com/stackrox/rox/migrator/types"
	ops "github.com/stackrox/rox/pkg/metrics"
	pkgSchema "github.com/stackrox/rox/pkg/postgres/schema"
	bolt "go.etcd.io/bbolt"
	boltStore "github.com/stackrox/rox/migrator/migrations/n_13_to_n_14_postgres_configs/bolt"
	"gorm.io/gorm"
)

var (
	migration = types.Migration{
		StartingSeqNum: 100,
		VersionAfter:   storage.Version{SeqNum: 101},
		Run: func(databases *types.Databases) error {
			if err := moveConfigs(databases.BoltDB, databases.GormDB, databases.PostgresDB); err != nil {
				return errors.Wrap(err,
					"moving configs from rocksdb to postgres")
			}
			return nil
		},
	}
	configBucket = []byte("config")
	batchSize    = 10000
	schema       = pkgSchema.ConfigsSchema
	log          = loghelper.LogWrapper{}
)

func moveConfigs(legacyDB *bolt.DB, gormDB *gorm.DB, postgresDB *pgxpool.Pool) error {
	ctx := context.Background()
	store := newStore(postgresDB, legacyDB)
	pkgSchema.ApplySchemaForTable(context.Background(), gormDB, schema.Table)

	config, found, err := store.legacyStore.Get(ctx)
	if err != nil {
		log.WriteToStderr("failed to fetch config")
		return err
	}
	if !found {
		return nil
	}
	store.Upsert(ctx, config)
	return nil
}

type storeImpl struct {
	db       *pgxpool.Pool // Postgres DB
	legacyDB *bolt.DB
	legacyStore *boltStore.Store
}

// newStore returns a new Store instance using the provided sql instance.
func newStore(db *pgxpool.Pool, legacyDB *bolt.DB) *storeImpl {
	return &storeImpl{
		db:          db,
		legacyDB:    legacyDB,
		legacyStore: boltStore.New(legacyDB),
	}
}

func (s *storeImpl) acquireConn(ctx context.Context, _ ops.Op, _ string) (*pgxpool.Conn, func(), error) {
	conn, err := s.db.Acquire(ctx)
	if err != nil {
		return nil, nil, err
	}
	return conn, conn.Release, nil
}

func init() {
	migrations.MustRegisterMigration(migration)
}
